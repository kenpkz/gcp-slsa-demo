steps:
- id: snyk-scan
  name: 'ubuntu:latest'
  entrypoint: sh
  args:
  - '-c'
  - | 
    apt-get update -y
    apt-get install nodejs -y
    apt-get install npm -y
    apt-get install maven -y
    npm install -g snyk
    npm install
    snyk auth $$SNYK_TOKEN
    snyk monitor
  secretEnv:
    - SNYK_TOKEN
- id: sonarqube-scan
  name: "node"
  entrypoint: sh
  args: 
  - '-c' 
  - |
    echo "SONAR_TOKEN: $$SONAR_TOKEN"
    npm install -g sonarqube-scanner
    sonar-scanner \
    -Dsonar.projectKey=cloudbuild \
    -Dsonar.host.url=http://${_SONARQUBE_SERVER} \
    -Dsonar.login=$$SONAR_TOKEN \
    -Dsonar.qualitygate.wait=true
  secretEnv: 
    - SONAR_TOKEN
- id: build-container
  name: gcr.io/cloud-builders/gcloud
  entrypoint: sh
  args: 
  - '-c' 
  - |
    echo "TAG: ${SHORT_SHA}"
    gcloud builds submit --timeout=1200s --tag=${_IMAGE_PATH}:${SHORT_SHA} .
    ImageDigest=$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)
    echo "${_IMAGE_PATH}@${ImageDigest}" > image-digest.txt
- id: vulnsign  
  name: gcr.io/slsa-demo/kritis-signer
  entrypoint: /bin/bash
  args:
  - '-c'
  - |
    /kritis/signer -v=10 -alsologtostderr \
    -image=$(/bin/cat image-digest.txt) \
    -policy=policy.yaml \
    -kms_key_name=${_KMS_IMAGEKEY_NAME} \
    -kms_digest_alg=${_KMS_DIGEST} \
    -note_name=${_NOTE_NAME}
  waitFor: ['build-container']
- id: 'Create Attestation'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: sh
  args:
  - '-c'
  - |
    apt-get update -y
    apt-get install -y jq
    Vulnerability=$(curl -u $$SONAR_ADMIN http://${_SONARQUBE_SERVER}/api/issues/search | jq '.issues[].type' | grep "VULNERABILITY" | wc -l)
    if [ ${Vulnerability} -eq "0" ]; then
      ImageDigest="$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)"
      ImageToAttest="${_IMAGE_PATH}@${ImageDigest}" 
      gcloud beta container binauthz attestations sign-and-create \
        --project="${PROJECT_ID}" \
        --artifact-url="${ImageToAttest}" \
        --attestor="${_ATTESTOR_NAME}" \
        --attestor-project="${PROJECT_ID}" \
        --keyversion-project="${PROJECT_ID}" \
        --keyversion-location="${_KMS_KEY_LOCATION}" \
        --keyversion-keyring="${_KMS_KEYRING_NAME}" \
        --keyversion-key="${_KMS_KEY_NAME}" \
        --keyversion="${_KMS_KEY_VERSION}"
      echo "Sign-And-Create to Image: ${ImageToAttest}"
    else
      echo "Vulnerability Count = ${Vulnerability}. Cannot Provide the Signature!"
      exit 1
    fi
  secretEnv: 
    - SONAR_ADMIN
  waitFor: [vulnsign]
- id: 'Change Deployment Image Tag Name & Trigger cloud deploy'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: sh
  args: 
  - '-c'
  - |
    gcloud pubsub topics publish ${_RELEASE_PIPELINE} --message "Release Request for ${SHORT_SHA}"

substitutions:
  _IMAGE_PATH: asia-east1-docker.pkg.dev/slsa-demo/slsa-demo/juiceshop
  _ATTESTOR_NAME: sca-attestor
  _KMS_KEY_LOCATION: asia-east1
  _KMS_KEYRING_NAME: slsa-keyring
  _KMS_DIGEST: SHA256
  _KMS_KEY_NAME: slsa-sca-key
  _KMS_IMAGEKEY_NAME: "projects/${PROJECT_ID}/locations/${_KMS_KEY_LOCATION}/keyRings/${_KMS_KEYRING_NAME}/cryptoKeys/slsa-image-key/cryptoKeyVersions/1"
  _KMS_KEY_VERSION: "1"
  _RELEASE_PIPELINE: release-2-pipeline
  # Replace with your SonarQube server URL
  _SONARQUBE_SERVER: "sonar.kendemo.app"
  _NOTE_NAME: projects/slsa-demo/notes/image-scan
timeout: 1800s
availableSecrets:
  secretManager:
  - versionName: projects/626509627908/secrets/SNYK_TOKEN/versions/1
    env: 'SNYK_TOKEN'
  - versionName: projects/626509627908/secrets/SONAR_TOKEN/versions/1
    env: 'SONAR_TOKEN'
  - versionName: projects/626509627908/secrets/sonarqube_admin/versions/1
    env: 'SONAR_ADMIN'